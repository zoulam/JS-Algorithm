// js 以64 位存储数据，但是运算的时候是转化为32位计算，所以表现出来的就是32位计算
console.log('-----------------------------------左移右移----------------------------------------');
// 粗暴的理解成除以二在向下取整
console.log(4 >> 1) // 2
console.log(7 >> 1) // 3
console.log(8 >> 1) // 4
console.log(4 << 1) // 8
console.log(3 << 2) // 12
console.log('-----------------------------------无符号右移----------------------------------------');
/**
 * 无符号右移的正数与有符号一致，负数的右移则是将负数的(符号位)视为数字，然后右移
 *
*/
console.log(-64 >>> 5) // 134217726

// 进制转换
let num = -18
console.log(num.toString(2)) // -10010
console.log(0xA) // 10
console.log(0b10011) // 19
console.log('-----------------------------------按位非----------------------------------------');
// 取反并减1
console.log(~25) // -26
console.log(~(-25)) // 24
// 按位与 (1 1 得 1)
console.log(25 & 3) // 27
// 按位或 (0 0 得 0)
console.log(25 | 3) // 1
// 按位异或 (01 10 得1)
// 异或可以认为是三个数字为一组两两之间可以互换，也就是我们常用的对称加密算法
console.log(25 ^ 3) // 26
console.log(25 ^ 26) // 3
console.log('-----------------------------------最大数----------------------------------------');
console.log(2 ** 53, (-2) ** 53)
console.log(Number.MAX_SAFE_INTEGER)
console.log(Number.MIN_SAFE_INTEGER)


